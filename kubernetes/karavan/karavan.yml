
#sample log timer : https://www.youtube.com/watch?v=3ucMUM7YfU8

---
apiVersion: "v1"
kind: "Secret"
metadata:
  name: "karavan"
stringData:
  karavan.keycloak.url: "https://localhost"
  karavan.keycloak.realm: "karavan"
  karavan.keycloak.frontend.clientId: "karavan"
  karavan.keycloak.backend.clientId: "karavan"
  karavan.keycloak.backend.secret: "secret"
  karavan.git.repository: "https://xxxxx@dev.azure.com/xxxxx/DEMOS/_git/karavan-samples"
  karavan.git.username: "rafael.blanco"
  karavan.git.password: "*********"
  karavan.git.branch: "main"
  karavan.container-image.registry: "registry:5000"
  karavan.container-image.group: "karavan"
  karavan.container-image.registry-username: 
  karavan.container-image.registry-password:


---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  name: "karavan"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "karavan"
  template:
    metadata:
      labels:
        app: "karavan"
    spec:
      containers:
      - env:
        - name: "KARAVAN_ENVIRONMENT"
          value: "dev"
        - name: "KARAVAN_CONTAINER_STATUS_INTERVAL"
          value: "disabled"
        - name: "KARAVAN_CONTAINER_STATISTICS_INTERVAL"
          value: "disabled"
        - name: "KARAVAN_CAMEL_STATUS_INTERVAL"
          value: "3s"
        - name: "KARAVAN_DEVMODE_IMAGE"
          value: "ghcr.io/apache/camel-karavan-devmode:4.10.2"
        - name: "karavan.git.repository"
          valueFrom:
            secretKeyRef:
              key: "karavan.git.repository"
              name: "karavan"
        - name: "karavan.git.username"
          valueFrom:
            secretKeyRef:
              key: "karavan.git.username"
              name: "karavan"
        - name: "karavan.git.password"
          valueFrom:
            secretKeyRef:
              key: "karavan.git.password"
              name: "karavan"
        - name: "karavan.git.branch"
          valueFrom:
            secretKeyRef:
              key: "karavan.git.branch"
              name: "karavan"
        - name: "karavan.keycloak.url"
          valueFrom:
            secretKeyRef:
              key: "karavan.keycloak.url"
              name: "karavan"
        - name: "karavan.keycloak.realm"
          valueFrom:
            secretKeyRef:
              key: "karavan.keycloak.realm"
              name: "karavan"
        - name: "karavan.keycloak.frontend.clientId"
          valueFrom:
            secretKeyRef:
              key: "karavan.keycloak.frontend.clientId"
              name: "karavan"
        - name: "karavan.keycloak.backend.clientId"
          valueFrom:
            secretKeyRef:
              key: "karavan.keycloak.backend.clientId"
              name: "karavan"
        - name: "karavan.keycloak.backend.secret"
          valueFrom:
            secretKeyRef:
              key: "karavan.keycloak.backend.secret"
              name: "karavan"
        - name: "KUBERNETES_NAMESPACE"
          valueFrom:
            fieldRef:
              apiVersion: ""
              fieldPath: "metadata.namespace"
        image: "ghcr.io/apache/camel-karavan:4.10.2"
        imagePullPolicy: "Always"
        name: "karavan"
        ports:
        - containerPort: 8080
          name: "karavan"
        resources:
          requests:
            memory: "1024Mi"
      serviceAccount: "karavan"


---
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
commonLabels:
  app: "karavan"
  app.kubernetes.io/part-of: "karavan"
  app.kubernetes.io/name: "karavan"
  app.kubernetes.io/version: "4.10.2"
namespace: "karavan"
resources:
  - secret.yaml
  - role.yaml
  - service-account.yaml
  - role-binding.yaml
  - deployment.yaml
  - service.yaml

# Patch for Service with nodePort
patches:
  - path: ./nodePort.yaml
    target:
      kind: "Service"
      name: "karavan"
      
# Replace secret from.env if required
secretGenerator:
- name: karavan
  behavior: replace
  options:
      disableNameSuffixHash: true
  envs:
    - .env


---
apiVersion: "v1"
kind: "Service"
metadata:
  name: "karavan"
spec:
  ports:
  - name: "http"
    nodePort: 30777
    port: 80
    protocol: "TCP"
    targetPort: 8080
  selector:
    app: "karavan"
  type: "NodePort"

---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "RoleBinding"
metadata:
  name: "karavan-role-binding"
roleRef:
  kind: "Role"
  apiGroup: "rbac.authorization.k8s.io"
  name: "karavan"
subjects:
- kind: "ServiceAccount"
  apiGroup: ""
  name: "karavan"
---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "RoleBinding"
metadata:
  name: "karavan-cluster-role-binding"
roleRef:
  kind: "ClusterRole"
  apiGroup: "rbac.authorization.k8s.io"
  name: "view"
subjects:
- kind: "ServiceAccount"
  apiGroup: ""
  name: "karavan"


---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "Role"
metadata:
  name: "karavan"
rules:
- apiGroups: [""]
  resources: ["secrets", "configmaps", "serviceaccounts", "namespaces"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["persistentvolumes", "persistentvolumeclaims"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers"]
  verbs: ["*"]
- apiGroups: ["route.openshift.io"]
  resources: ["routes"]
  verbs:  ["*"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["*"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["*"]
- apiGroups: ["image.openshift.io"]
  resources: ["imagestreams/layers"]
  verbs: ["update", "get"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create", "get"]

---
apiVersion: "v1"
kind: "ServiceAccount"
metadata:
  name: "karavan"

---
apiVersion: "v1"
kind: "Service"
metadata:
  name: "karavan"
spec:
  ports:
  - name: "http"
    # nodePort: 30777
    port: 80
    protocol: "TCP"
    targetPort: 8080
  - name: "https"
    port: 443
    protocol: "TCP"
    targetPort: 8080
  selector:
    app: "karavan"
  # type: "NodePort"
  type: "ClusterIP"


